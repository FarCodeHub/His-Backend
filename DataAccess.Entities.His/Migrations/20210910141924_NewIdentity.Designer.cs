// <auto-generated />
using System;
using DataAccess.Entities.His.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Entities.His.Migrations
{
    [DbContext(typeof(PortalHisContext))]
    [Migration("20210910141924_NewIdentity")]
    partial class NewIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.His.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BaseValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseValueTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<long?>("OldDbid")
                        .HasColumnType("bigint")
                        .HasColumnName("OldDBId");

                    b.Property<short>("OrderIndex")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BaseValueTypeId");

                    b.ToTable("BaseValue");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BaseValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("SubSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BaseValueType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BuyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<long?>("Cost")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("GitReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("BuyMessage");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CardCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HealthNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Serial")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CardCode");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ZoneId");

                    b.ToTable("CenterLocation");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("CenterService");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("CenterSpeciality");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActiveTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("CenterStaff");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Translate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CenterType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.DataTransferConvert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsSyncOk")
                        .HasColumnType("bit");

                    b.Property<string>("SyncMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TableName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TargetTableId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DataTransferConvert");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrokenConsumptionBase")
                        .HasColumnType("int");

                    b.Property<int?>("BrokenConsumptionId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContentsOf")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("DrugCode")
                        .HasColumnType("int");

                    b.Property<int?>("DrugFormId")
                        .HasColumnType("int");

                    b.Property<int?>("GenericId")
                        .HasColumnType("int");

                    b.Property<int?>("HisCode")
                        .HasColumnType("int");

                    b.Property<bool?>("IsHighRisk")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNarcotic")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOtcRight")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaleWithoutPrescription")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTechnicalRight")
                        .HasColumnType("bit");

                    b.Property<string>("LocalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("StopConsumptionDay")
                        .HasColumnType("int");

                    b.Property<int?>("StoregConditonId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FileFolderName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("1= png\r\n2=jpg\r\n3=pdf\r\n4=folder");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Country : 1 , Province :2 , City : 3 , Zone : 4");

                    b.HasKey("Id");

                    b.ToTable("GeoLocation");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.GiftReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("GiftReason");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Boss")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BossId")
                        .HasColumnType("int");

                    b.Property<string>("BossPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CenterTypeId")
                        .HasColumnType("int")
                        .HasComment("Hospital : 1 , Clinic :2 , Section :3 , Lab:4");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFreeDelivery")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("OwnerShipBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneResponseHourse")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VisitorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WorkTimeBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterTypeId");

                    b.HasIndex("OwnerShipBaseId");

                    b.HasIndex("WorkTimeBaseId");

                    b.ToTable("MedicalCenter");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EmployeeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicalSystemNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Doctor : 1 , Nurse : 2 , Experts :3");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("MedicalStaff");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaffCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalStaffCertificate");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaffSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("MedicalStaffSpeciality");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoutePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.OwnershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OwnershipType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergies")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int?>("BloodGroupBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<long?>("Hisno")
                        .HasColumnType("bigint")
                        .HasColumnName("HISNo");

                    b.Property<int?>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupBaseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PatientExtraInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int?>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicIllnessId")
                        .HasColumnType("int")
                        .HasComment("معرف");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool?>("IsDrinking")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPregnant")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmoking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<int?>("IssuePlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int")
                        .HasComment("محل کار");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PregnancySeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int?>("RhId")
                        .HasColumnType("int")
                        .HasComment("فاکتوری در خون");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Word")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WorkAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientExtraInfo");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PatientFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("Age")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ExpertiseId")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameThree")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GeoLocationId")
                        .HasColumnType("int");

                    b.Property<string>("GrandFatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GreatGrandFatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaritalBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SexBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ShNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("MaritalBaseId");

                    b.HasIndex("SexBaseId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diet")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InteractionsNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MainDoctorNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PharmacistNoteForNursing")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PostMedicalHistory")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("PrescriptionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReceptionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionDetailDrug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DrugFormId")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DurationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("GenericDrugId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsJustOnTime")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<long?>("PanelId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriberNurseId")
                        .HasColumnType("int");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PrescriptionInstructionId")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFromSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WayOfPrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetailDrug");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionDetailService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime")
                        .HasComment("تاریخ شروع اقدام همچنین تاریخی که بخش مقصد این درخواست را میبیند در تناوب ها هم کاربرد دارد");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsJustOnTime")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<long?>("PanelId")
                        .HasColumnType("bigint")
                        .HasComment("در صورتی که سرویس ایدی خالی باشد");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriberNurseId")
                        .HasColumnType("int");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PrescriptionInstructionId")
                        .HasColumnType("int")
                        .HasComment("دستور العمل انجام مثلا هر هشت ساعت یه بار");

                    b.Property<int?>("PrescriptionTypeId")
                        .HasColumnType("int")
                        .HasComment("تشخیصی درمانی مراقبتی");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFromSectionId")
                        .HasColumnType("int")
                        .HasComment("از چه بخشی درخواست شده اگر در خود بخش انجام شود ایدی بخش جاری می خورد");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetailService");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionServiceResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Result2")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionServiceResult");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Reception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advice")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("ChiefComplaints")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConsumeDrug")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentIllnessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfSign")
                        .HasColumnType("datetime");

                    b.Property<int?>("GeneralStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HospitalEnteryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsHaveSign")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResult")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PresenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecoveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RefferDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RefferFromId")
                        .HasColumnType("int");

                    b.Property<int?>("RefferReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationId")
                        .HasColumnType("int");

                    b.Property<string>("ResultNote")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Reception");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.RequestService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("DetailReceptionId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DoctorDiscount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorPercent")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExtraPayment")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentReceptionServiceId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PatientShare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<long?>("PrescriptionDetailServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PrescriptionShare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("PriceMethodTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Providershare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("SectionDiscount")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceChildId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TechnicalShare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("RequestService");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Rh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Rh");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UniqueName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("DayQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("VisitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.ScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDetail");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbreviationTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("money");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Component")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FormulaExpr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("GroupAnswerId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasBiopsy")
                        .HasColumnType("bit");

                    b.Property<int?>("HourToResponseEmergency")
                        .HasColumnType("int")
                        .HasComment("روزانه را هم به صورت ساعت در این فیلد ذخیره می شود");

                    b.Property<int?>("HourToResponseNormal")
                        .HasColumnType("int")
                        .HasComment("روزانه را هم به صورت ساعت در این فیلد ذخیره می شود");

                    b.Property<int?>("IcdCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("Info")
                        .HasColumnType("int");

                    b.Property<string>("InterNationalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAnswerAtMoment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDiff")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLaboratoryOrderPanels")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLongAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNumeric")
                        .HasColumnType("bit");

                    b.Property<int?>("LabKitId")
                        .HasColumnType("int");

                    b.Property<int?>("LabTypeId")
                        .HasColumnType("int")
                        .HasComment("هر آزمایش در نوعی دیگر دسته¬بندی شده و بر اساس دسته بندی، در شرایط خاصی برای دریافت نمونه و جواب¬دهی با آن برخورد می-شود. این آزمایشات در ثبت و روش انجام با هم تفاوت دارند. به همین جهت، در ثبت آزمایش مهم است که نوع آزمایش مشخص شود.");

                    b.Property<string>("LatinDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("abbreviation name in lab test");

                    b.Property<string>("LocalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongCommonName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MethodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("OrderObservationId")
                        .HasColumnType("int")
                        .HasColumnName("OrderOBServationId");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RichLongAnswerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SampleSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ScaleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TestAnswerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TestTubeColorId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeAspctId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InternationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Code2")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.SmsGiftReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IcdCodeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LocalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("SmsGiftReason");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.SmsOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IcdCodeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LocalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("SmsOperators");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CardCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSync")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("SmsToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SmsUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.UserCardCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CardCodeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("ValidityPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardCodeId");

                    b.ToTable("UserCardCode");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.WorkTimeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WorkTimeType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NoteLang2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleLang2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ParentId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BaseValue", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.BaseValueType", "BaseValueType")
                        .WithMany("BaseValues")
                        .HasForeignKey("BaseValueTypeId")
                        .HasConstraintName("FK_BaseValue_BaseValueType")
                        .IsRequired();

                    b.Navigation("BaseValueType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BuyMessage", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("BuyMessages")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_BuyMessage_MedicalCenter");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterLocation", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("CenterLocations")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_CenterLocation_MedicalCenter");

                    b.HasOne("DataAccess.Entities.His.Entities.GeoLocation", "City")
                        .WithMany("CenterLocationCities")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CenterLocation_GeoLocation3");

                    b.HasOne("DataAccess.Entities.His.Entities.GeoLocation", "Country")
                        .WithMany("CenterLocationCountries")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CenterLocation_GeoLocation1");

                    b.HasOne("DataAccess.Entities.His.Entities.GeoLocation", "Location")
                        .WithMany("CenterLocationLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_CenterLocation_GeoLocation");

                    b.HasOne("DataAccess.Entities.His.Entities.GeoLocation", "Province")
                        .WithMany("CenterLocationProvinces")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_CenterLocation_GeoLocation2");

                    b.HasOne("DataAccess.Entities.His.Entities.GeoLocation", "Zone")
                        .WithMany("CenterLocationZones")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_CenterLocation_GeoLocation4");

                    b.Navigation("Center");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Location");

                    b.Navigation("Province");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterService", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("CenterServices")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_CenterService_MedicalCenter")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.ServiceType", "ServiceType")
                        .WithMany("CenterServices")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_CenterService_ServiceType")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterSpeciality", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("CenterSpecialities")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_CenterSpeciality_MedicalCenter")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.Speciality", "Speciality")
                        .WithMany("CenterSpecialities")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("FK_CenterSpeciality_Speciality")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterStaff", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("CenterStaffs")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_CenterStaff_MedicalCenter");

                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("CenterStaffs")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_CenterStaff_MedicalStaff")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.City", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_City_Province");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.GiftReason", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Province", "Province")
                        .WithMany("GiftReasons")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_GitReason_Province");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalCenter", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.CenterType", "CenterType")
                        .WithMany("MedicalCenters")
                        .HasForeignKey("CenterTypeId")
                        .HasConstraintName("FK_MedicalCenter_CenterType")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "OwnerShipBase")
                        .WithMany("MedicalCenterOwnerShipBases")
                        .HasForeignKey("OwnerShipBaseId")
                        .HasConstraintName("FK_MedicalCenter_BaseValue");

                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "WorkTimeBase")
                        .WithMany("MedicalCenterWorkTimeBases")
                        .HasForeignKey("WorkTimeBaseId")
                        .HasConstraintName("FK_MedicalCenter_BaseValue1");

                    b.Navigation("CenterType");

                    b.Navigation("OwnerShipBase");

                    b.Navigation("WorkTimeBase");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaff", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Person", "Person")
                        .WithMany("MedicalStaffs")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_MedicalStaff_Person")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaffSpeciality", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("MedicalStaffSpecialities")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_MedicalStaffSpeciality_MedicalStaff")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.Speciality", "Speciality")
                        .WithMany("MedicalStaffSpecialities")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("FK_MedicalStaffSpeciality_Speciality")
                        .IsRequired();

                    b.Navigation("MedicalStaff");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MenuItem", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Permission", "Permission")
                        .WithMany("MenuItems")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_MenuItems_Permissions");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Patient", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "BloodGroupBase")
                        .WithMany("Patients")
                        .HasForeignKey("BloodGroupBaseId")
                        .HasConstraintName("FK_Patient_BaseValue2");

                    b.HasOne("DataAccess.Entities.His.Entities.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Patient_Person")
                        .IsRequired();

                    b.Navigation("BloodGroupBase");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PatientExtraInfo", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Patient", "Patient")
                        .WithMany("PatientExtraInfos")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PaitientExtraInfo_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PatientFile", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.File", "File")
                        .WithMany("PatientFiles")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_PatientFile_File")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.Patient", "Patient")
                        .WithMany("PatientFiles")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientFile_Patient")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Person", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "Expertise")
                        .WithMany("PersonExpertises")
                        .HasForeignKey("ExpertiseId")
                        .HasConstraintName("FK_Person_BaseValue1");

                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "MaritalBase")
                        .WithMany("PersonMaritalBases")
                        .HasForeignKey("MaritalBaseId")
                        .HasConstraintName("FK_Person_BaseValue");

                    b.HasOne("DataAccess.Entities.His.Entities.BaseValue", "SexBase")
                        .WithMany("PersonSexBases")
                        .HasForeignKey("SexBaseId")
                        .HasConstraintName("FK_Person_BaseValue2");

                    b.Navigation("Expertise");

                    b.Navigation("MaritalBase");

                    b.Navigation("SexBase");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Prescription", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("Prescriptions")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Prescription_MedicalCenter");

                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_Prescription_MedicalStaff");

                    b.HasOne("DataAccess.Entities.His.Entities.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Prescription_Patient");

                    b.HasOne("DataAccess.Entities.His.Entities.User", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Prescription_User");

                    b.Navigation("Center");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionDetailDrug", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Drug", "Drug")
                        .WithMany("PrescriptionDetailDrugs")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_PrescriptionDetailDrug_Drugs");

                    b.HasOne("DataAccess.Entities.His.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionDetailDrugs")
                        .HasForeignKey("PrescriptionId")
                        .HasConstraintName("FK_PrescriptionDetailDrug_Prescription");

                    b.Navigation("Drug");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionDetailService", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionDetailServices")
                        .HasForeignKey("PrescriptionId")
                        .HasConstraintName("FK_PrescriptionDetailService_Prescription");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.PrescriptionServiceResult", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionServiceResults")
                        .HasForeignKey("PrescriptionId")
                        .HasConstraintName("FK_PrescriptionServiceResult_Prescription")
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Province", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Province_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Reception", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("Receptions")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Reception_MedicalCenter")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.Patient", "Patient")
                        .WithMany("Receptions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Reception_Patient")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.ServiceType", "ServiceType")
                        .WithMany("Receptions")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_Reception_ServiceType");

                    b.Navigation("Center");

                    b.Navigation("Patient");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.RequestService", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("RequestServices")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_RequestService_MedicalStaff");

                    b.HasOne("DataAccess.Entities.His.Entities.Reception", "Reception")
                        .WithMany("RequestServices")
                        .HasForeignKey("ReceptionId")
                        .HasConstraintName("FK_RequestService_Reception");

                    b.HasOne("DataAccess.Entities.His.Entities.Schedule", "Schedule")
                        .WithMany("RequestServices")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_RequestService_Schedule");

                    b.HasOne("DataAccess.Entities.His.Entities.ServiceType", "ServiceType")
                        .WithMany("RequestServices")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_RequestService_ServiceType");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Reception");

                    b.Navigation("Schedule");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.RolePermission", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RolePermissions_Permissions")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissions_Roles")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Schedule", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalCenter", "Center")
                        .WithMany("Schedules")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Schedule_MedicalCenter");

                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("Schedules")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_Schedule_MedicalStaff");

                    b.Navigation("Center");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.ScheduleDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("MedicalStaffId")
                        .HasConstraintName("FK_ScheduleDetail_MedicalStaff");

                    b.HasOne("DataAccess.Entities.His.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_ScheduleDetail_Schedule");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Service", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Service", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Services_ParentServices");

                    b.HasOne("DataAccess.Entities.His.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_Service_ServiceType");

                    b.Navigation("Parent");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_User_Person")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.UserCardCode", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.CardCode", "CardCode")
                        .WithMany("UserCardCodes")
                        .HasForeignKey("CardCodeId")
                        .HasConstraintName("FK_UserCardCode_CardCode");

                    b.Navigation("CardCode");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.UserRole", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_User")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Zone", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.City", "City")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Zone_City");

                    b.HasOne("DataAccess.Entities.His.Entities.Zone", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Zone_Zone");

                    b.Navigation("City");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.His.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.His.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BaseValue", b =>
                {
                    b.Navigation("MedicalCenterOwnerShipBases");

                    b.Navigation("MedicalCenterWorkTimeBases");

                    b.Navigation("Patients");

                    b.Navigation("PersonExpertises");

                    b.Navigation("PersonMaritalBases");

                    b.Navigation("PersonSexBases");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.BaseValueType", b =>
                {
                    b.Navigation("BaseValues");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CardCode", b =>
                {
                    b.Navigation("UserCardCodes");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.CenterType", b =>
                {
                    b.Navigation("MedicalCenters");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.City", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Drug", b =>
                {
                    b.Navigation("PrescriptionDetailDrugs");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.File", b =>
                {
                    b.Navigation("PatientFiles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.GeoLocation", b =>
                {
                    b.Navigation("CenterLocationCities");

                    b.Navigation("CenterLocationCountries");

                    b.Navigation("CenterLocationLocations");

                    b.Navigation("CenterLocationProvinces");

                    b.Navigation("CenterLocationZones");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalCenter", b =>
                {
                    b.Navigation("BuyMessages");

                    b.Navigation("CenterLocations");

                    b.Navigation("CenterServices");

                    b.Navigation("CenterSpecialities");

                    b.Navigation("CenterStaffs");

                    b.Navigation("Prescriptions");

                    b.Navigation("Receptions");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.MedicalStaff", b =>
                {
                    b.Navigation("CenterStaffs");

                    b.Navigation("MedicalStaffSpecialities");

                    b.Navigation("Prescriptions");

                    b.Navigation("RequestServices");

                    b.Navigation("ScheduleDetails");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Patient", b =>
                {
                    b.Navigation("PatientExtraInfos");

                    b.Navigation("PatientFiles");

                    b.Navigation("Prescriptions");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Permission", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Person", b =>
                {
                    b.Navigation("MedicalStaffs");

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetailDrugs");

                    b.Navigation("PrescriptionDetailServices");

                    b.Navigation("PrescriptionServiceResults");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Province", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("GiftReasons");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Reception", b =>
                {
                    b.Navigation("RequestServices");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Schedule", b =>
                {
                    b.Navigation("RequestServices");

                    b.Navigation("ScheduleDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Service", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.ServiceType", b =>
                {
                    b.Navigation("CenterServices");

                    b.Navigation("Receptions");

                    b.Navigation("RequestServices");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Speciality", b =>
                {
                    b.Navigation("CenterSpecialities");

                    b.Navigation("MedicalStaffSpecialities");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.User", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.His.Entities.Zone", b =>
                {
                    b.Navigation("InverseParent");
                });
#pragma warning restore 612, 618
        }
    }
}
